<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_struct_im_bit_array" xml:lang="en-US">
<title>ImBitArray&lt; BITCOUNT, OFFSET &gt; Struct Template Reference</title>
<indexterm><primary>ImBitArray&lt; BITCOUNT, OFFSET &gt;</primary></indexterm>
<para>
<computeroutput>#include &lt;imgui_internal.h&gt;</computeroutput>
</para>
<simplesect>
    <title>Public Member Functions    </title>
        <itemizedlist>
            <listitem><para><link linkend="_struct_im_bit_array_1a243a21e76a7355afc5820f3a64168327">ImBitArray</link> ()</para>
</listitem>
            <listitem><para><link linkend="_gl__core__4__4_8c_1aba83f95e8ff4889aa9d4905633fca4da">void</link> <link linkend="_struct_im_bit_array_1ae0cc61bba70a3f2994f28130d9de76f4">ClearAllBits</link> ()</para>
</listitem>
            <listitem><para><link linkend="_gl__core__4__4_8c_1aba83f95e8ff4889aa9d4905633fca4da">void</link> <link linkend="_struct_im_bit_array_1a52c1f3ec6a89c91e2090bf75e00152ac">SetAllBits</link> ()</para>
</listitem>
            <listitem><para>bool <link linkend="_struct_im_bit_array_1a803e52b9d1653dca6cac959cb84d64e9">TestBit</link> (int n) const</para>
</listitem>
            <listitem><para><link linkend="_gl__core__4__4_8c_1aba83f95e8ff4889aa9d4905633fca4da">void</link> <link linkend="_struct_im_bit_array_1a8c4d1a352cbd565200c8fe983c879022">SetBit</link> (int n)</para>
</listitem>
            <listitem><para><link linkend="_gl__core__4__4_8c_1aba83f95e8ff4889aa9d4905633fca4da">void</link> <link linkend="_struct_im_bit_array_1a48d77393cf81d3a7c4b94a90be6ee66f">ClearBit</link> (int n)</para>
</listitem>
            <listitem><para><link linkend="_gl__core__4__4_8c_1aba83f95e8ff4889aa9d4905633fca4da">void</link> <link linkend="_struct_im_bit_array_1a7a3a4472aaf1eb8a6fe5f7aeed155b54">SetBitRange</link> (int n, int n2)</para>
</listitem>
            <listitem><para>bool <link linkend="_struct_im_bit_array_1ae1b3a57b35efd1f1ffb51629cce38c14">operator[]</link> (int n) const</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Public Attributes    </title>
        <itemizedlist>
            <listitem><para><link linkend="_imgui_8h_1a118cff4eeb8d00e7d07ce3d6460eed36">ImU32</link> <link linkend="_struct_im_bit_array_1a065f1afa4c24614bb85e34239ed67ecf">Storage</link> [(BITCOUNT+31) &gt; &gt; 5]</para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Constructor &amp; Destructor Documentation</title>
<anchor xml:id="_struct_im_bit_array_1a243a21e76a7355afc5820f3a64168327"/><section>
    <title>ImBitArray()</title>
<indexterm><primary>ImBitArray</primary><secondary>ImBitArray&lt; BITCOUNT, OFFSET &gt;</secondary></indexterm>
<indexterm><primary>ImBitArray&lt; BITCOUNT, OFFSET &gt;</primary><secondary>ImBitArray</secondary></indexterm>
<computeroutput>template&lt;int BITCOUNT, int OFFSET = 0&gt; </computeroutput><para><computeroutput><link linkend="_struct_im_bit_array">ImBitArray</link>&lt; BITCOUNT, OFFSET &gt;<link linkend="_struct_im_bit_array">::ImBitArray</link> ( )<computeroutput>[inline]</computeroutput></computeroutput></para></section>
</section>
<section>
<title>Member Function Documentation</title>
<anchor xml:id="_struct_im_bit_array_1ae0cc61bba70a3f2994f28130d9de76f4"/><section>
    <title>ClearAllBits()</title>
<indexterm><primary>ClearAllBits</primary><secondary>ImBitArray&lt; BITCOUNT, OFFSET &gt;</secondary></indexterm>
<indexterm><primary>ImBitArray&lt; BITCOUNT, OFFSET &gt;</primary><secondary>ClearAllBits</secondary></indexterm>
<computeroutput>template&lt;int BITCOUNT, int OFFSET = 0&gt; </computeroutput><para><computeroutput><link linkend="_gl__core__4__4_8c_1aba83f95e8ff4889aa9d4905633fca4da">void</link> <link linkend="_struct_im_bit_array">ImBitArray</link>&lt; BITCOUNT, OFFSET &gt;::ClearAllBits ( )<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_struct_im_bit_array_1a48d77393cf81d3a7c4b94a90be6ee66f"/><section>
    <title>ClearBit()</title>
<indexterm><primary>ClearBit</primary><secondary>ImBitArray&lt; BITCOUNT, OFFSET &gt;</secondary></indexterm>
<indexterm><primary>ImBitArray&lt; BITCOUNT, OFFSET &gt;</primary><secondary>ClearBit</secondary></indexterm>
<computeroutput>template&lt;int BITCOUNT, int OFFSET = 0&gt; </computeroutput><para><computeroutput><link linkend="_gl__core__4__4_8c_1aba83f95e8ff4889aa9d4905633fca4da">void</link> <link linkend="_struct_im_bit_array">ImBitArray</link>&lt; BITCOUNT, OFFSET &gt;::ClearBit (int n)<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_struct_im_bit_array_1ae1b3a57b35efd1f1ffb51629cce38c14"/><section>
    <title>operator[]()</title>
<indexterm><primary>operator[]</primary><secondary>ImBitArray&lt; BITCOUNT, OFFSET &gt;</secondary></indexterm>
<indexterm><primary>ImBitArray&lt; BITCOUNT, OFFSET &gt;</primary><secondary>operator[]</secondary></indexterm>
<computeroutput>template&lt;int BITCOUNT, int OFFSET = 0&gt; </computeroutput><para><computeroutput>bool <link linkend="_struct_im_bit_array">ImBitArray</link>&lt; BITCOUNT, OFFSET &gt;::operator[] (int n) const<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_struct_im_bit_array_1a52c1f3ec6a89c91e2090bf75e00152ac"/><section>
    <title>SetAllBits()</title>
<indexterm><primary>SetAllBits</primary><secondary>ImBitArray&lt; BITCOUNT, OFFSET &gt;</secondary></indexterm>
<indexterm><primary>ImBitArray&lt; BITCOUNT, OFFSET &gt;</primary><secondary>SetAllBits</secondary></indexterm>
<computeroutput>template&lt;int BITCOUNT, int OFFSET = 0&gt; </computeroutput><para><computeroutput><link linkend="_gl__core__4__4_8c_1aba83f95e8ff4889aa9d4905633fca4da">void</link> <link linkend="_struct_im_bit_array">ImBitArray</link>&lt; BITCOUNT, OFFSET &gt;::SetAllBits ( )<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_struct_im_bit_array_1a8c4d1a352cbd565200c8fe983c879022"/><section>
    <title>SetBit()</title>
<indexterm><primary>SetBit</primary><secondary>ImBitArray&lt; BITCOUNT, OFFSET &gt;</secondary></indexterm>
<indexterm><primary>ImBitArray&lt; BITCOUNT, OFFSET &gt;</primary><secondary>SetBit</secondary></indexterm>
<computeroutput>template&lt;int BITCOUNT, int OFFSET = 0&gt; </computeroutput><para><computeroutput><link linkend="_gl__core__4__4_8c_1aba83f95e8ff4889aa9d4905633fca4da">void</link> <link linkend="_struct_im_bit_array">ImBitArray</link>&lt; BITCOUNT, OFFSET &gt;::SetBit (int n)<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_struct_im_bit_array_1a7a3a4472aaf1eb8a6fe5f7aeed155b54"/><section>
    <title>SetBitRange()</title>
<indexterm><primary>SetBitRange</primary><secondary>ImBitArray&lt; BITCOUNT, OFFSET &gt;</secondary></indexterm>
<indexterm><primary>ImBitArray&lt; BITCOUNT, OFFSET &gt;</primary><secondary>SetBitRange</secondary></indexterm>
<computeroutput>template&lt;int BITCOUNT, int OFFSET = 0&gt; </computeroutput><para><computeroutput><link linkend="_gl__core__4__4_8c_1aba83f95e8ff4889aa9d4905633fca4da">void</link> <link linkend="_struct_im_bit_array">ImBitArray</link>&lt; BITCOUNT, OFFSET &gt;::SetBitRange (int n, int n2)<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_struct_im_bit_array_1a803e52b9d1653dca6cac959cb84d64e9"/><section>
    <title>TestBit()</title>
<indexterm><primary>TestBit</primary><secondary>ImBitArray&lt; BITCOUNT, OFFSET &gt;</secondary></indexterm>
<indexterm><primary>ImBitArray&lt; BITCOUNT, OFFSET &gt;</primary><secondary>TestBit</secondary></indexterm>
<computeroutput>template&lt;int BITCOUNT, int OFFSET = 0&gt; </computeroutput><para><computeroutput>bool <link linkend="_struct_im_bit_array">ImBitArray</link>&lt; BITCOUNT, OFFSET &gt;::TestBit (int n) const<computeroutput>[inline]</computeroutput></computeroutput></para></section>
</section>
<section>
<title>Member Data Documentation</title>
<anchor xml:id="_struct_im_bit_array_1a065f1afa4c24614bb85e34239ed67ecf"/><section>
    <title>Storage</title>
<indexterm><primary>Storage</primary><secondary>ImBitArray&lt; BITCOUNT, OFFSET &gt;</secondary></indexterm>
<indexterm><primary>ImBitArray&lt; BITCOUNT, OFFSET &gt;</primary><secondary>Storage</secondary></indexterm>
<computeroutput>template&lt;int BITCOUNT, int OFFSET = 0&gt; </computeroutput><para><computeroutput><link linkend="_imgui_8h_1a118cff4eeb8d00e7d07ce3d6460eed36">ImU32</link> <link linkend="_struct_im_bit_array">ImBitArray</link>&lt; BITCOUNT, OFFSET &gt;::Storage[(BITCOUNT+31) &gt; &gt; 5]</computeroutput></para></section>
<para>
The documentation for this struct was generated from the following file:</para>
<link linkend="_imgui__internal_8h">imgui_internal.h</link></section>
</section>

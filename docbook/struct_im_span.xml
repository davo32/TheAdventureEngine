<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_struct_im_span" xml:lang="en-US">
<title>ImSpan&lt; T &gt; Struct Template Reference</title>
<indexterm><primary>ImSpan&lt; T &gt;</primary></indexterm>
<para>
<computeroutput>#include &lt;imgui_internal.h&gt;</computeroutput>
</para>
<simplesect>
    <title>Public Member Functions    </title>
        <itemizedlist>
            <listitem><para><link linkend="_struct_im_span_1a7321bafbe082a57c06851713da41c42d">ImSpan</link> ()</para>
</listitem>
            <listitem><para><link linkend="_struct_im_span_1a504d7469748d2ebf782f3993d8f35ad2">ImSpan</link> (T *<link linkend="_imgui__impl__opengl3__loader_8h_1abd87654504355b4c1bb002dcb1d4d16a">data</link>, int <link linkend="_imgui__impl__opengl3__loader_8h_1a3d1e3edfcf61ca2d831883e1afbad89e">size</link>)</para>
</listitem>
            <listitem><para><link linkend="_struct_im_span_1abc89fdbfad2b87dd044a197983c4eddb">ImSpan</link> (T *<link linkend="_imgui__impl__opengl3__loader_8h_1abd87654504355b4c1bb002dcb1d4d16a">data</link>, T *data_end)</para>
</listitem>
            <listitem><para><link linkend="_gl__core__4__4_8c_1aba83f95e8ff4889aa9d4905633fca4da">void</link> <link linkend="_struct_im_span_1a0c07dbc18bebd7d02ca1fb866861506a">set</link> (T *<link linkend="_imgui__impl__opengl3__loader_8h_1abd87654504355b4c1bb002dcb1d4d16a">data</link>, int <link linkend="_imgui__impl__opengl3__loader_8h_1a3d1e3edfcf61ca2d831883e1afbad89e">size</link>)</para>
</listitem>
            <listitem><para><link linkend="_gl__core__4__4_8c_1aba83f95e8ff4889aa9d4905633fca4da">void</link> <link linkend="_struct_im_span_1aa663983a692baf82e44687cc9a373964">set</link> (T *<link linkend="_imgui__impl__opengl3__loader_8h_1abd87654504355b4c1bb002dcb1d4d16a">data</link>, T *data_end)</para>
</listitem>
            <listitem><para>int <link linkend="_struct_im_span_1a88270b885861b27640003f6a8a3effa0">size</link> () const</para>
</listitem>
            <listitem><para>int <link linkend="_struct_im_span_1a23a632e44927fde363df6191531591f2">size_in_bytes</link> () const</para>
</listitem>
            <listitem><para>T &amp; <link linkend="_struct_im_span_1a3290bb3b3a0525cd156a68c2b10413c1">operator[]</link> (int i)</para>
</listitem>
            <listitem><para>const T &amp; <link linkend="_struct_im_span_1aece61505cbe4789a4423eaabdd5689dc">operator[]</link> (int i) const</para>
</listitem>
            <listitem><para>T * <link linkend="_struct_im_span_1a7ba3b04224a0fb1462e73f7e197bfae3">begin</link> ()</para>
</listitem>
            <listitem><para>const T * <link linkend="_struct_im_span_1abb79a7731eb2fc2c87cf2c162a2af9b6">begin</link> () const</para>
</listitem>
            <listitem><para>T * <link linkend="_struct_im_span_1a58afe6e42b431f4bed175d36720ec025">end</link> ()</para>
</listitem>
            <listitem><para>const T * <link linkend="_struct_im_span_1a595471c094072ac34cc318d8ba414f5a">end</link> () const</para>
</listitem>
            <listitem><para>int <link linkend="_struct_im_span_1a7e80a5146acbfac4bb952f80daf3c305">index_from_ptr</link> (const T *it) const</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Public Attributes    </title>
        <itemizedlist>
            <listitem><para>T * <link linkend="_struct_im_span_1a9cb5f8d45dff07a275c97b4d07915878">Data</link></para>
</listitem>
            <listitem><para>T * <link linkend="_struct_im_span_1a15a821b2ed71c9e447611cb3fe21d16c">DataEnd</link></para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Constructor &amp; Destructor Documentation</title>
<anchor xml:id="_struct_im_span_1a7321bafbe082a57c06851713da41c42d"/><section>
    <title>ImSpan()<computeroutput>[1/3]</computeroutput></title>
<indexterm><primary>ImSpan</primary><secondary>ImSpan&lt; T &gt;</secondary></indexterm>
<indexterm><primary>ImSpan&lt; T &gt;</primary><secondary>ImSpan</secondary></indexterm>
<computeroutput>template&lt;typename T &gt; </computeroutput><para><computeroutput><link linkend="_struct_im_span">ImSpan</link>&lt; T &gt;<link linkend="_struct_im_span">::ImSpan</link> ( )<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_struct_im_span_1a504d7469748d2ebf782f3993d8f35ad2"/><section>
    <title>ImSpan()<computeroutput>[2/3]</computeroutput></title>
<indexterm><primary>ImSpan</primary><secondary>ImSpan&lt; T &gt;</secondary></indexterm>
<indexterm><primary>ImSpan&lt; T &gt;</primary><secondary>ImSpan</secondary></indexterm>
<computeroutput>template&lt;typename T &gt; </computeroutput><para><computeroutput><link linkend="_struct_im_span">ImSpan</link>&lt; T &gt;<link linkend="_struct_im_span">::ImSpan</link> (T * data, int size)<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_struct_im_span_1abc89fdbfad2b87dd044a197983c4eddb"/><section>
    <title>ImSpan()<computeroutput>[3/3]</computeroutput></title>
<indexterm><primary>ImSpan</primary><secondary>ImSpan&lt; T &gt;</secondary></indexterm>
<indexterm><primary>ImSpan&lt; T &gt;</primary><secondary>ImSpan</secondary></indexterm>
<computeroutput>template&lt;typename T &gt; </computeroutput><para><computeroutput><link linkend="_struct_im_span">ImSpan</link>&lt; T &gt;<link linkend="_struct_im_span">::ImSpan</link> (T * data, T * data_end)<computeroutput>[inline]</computeroutput></computeroutput></para></section>
</section>
<section>
<title>Member Function Documentation</title>
<anchor xml:id="_struct_im_span_1a7ba3b04224a0fb1462e73f7e197bfae3"/><section>
    <title>begin()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>begin</primary><secondary>ImSpan&lt; T &gt;</secondary></indexterm>
<indexterm><primary>ImSpan&lt; T &gt;</primary><secondary>begin</secondary></indexterm>
<computeroutput>template&lt;typename T &gt; </computeroutput><para><computeroutput>T * <link linkend="_struct_im_span">ImSpan</link>&lt; T &gt;::begin ( )<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_struct_im_span_1abb79a7731eb2fc2c87cf2c162a2af9b6"/><section>
    <title>begin()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>begin</primary><secondary>ImSpan&lt; T &gt;</secondary></indexterm>
<indexterm><primary>ImSpan&lt; T &gt;</primary><secondary>begin</secondary></indexterm>
<computeroutput>template&lt;typename T &gt; </computeroutput><para><computeroutput>const T * <link linkend="_struct_im_span">ImSpan</link>&lt; T &gt;::begin ( ) const<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_struct_im_span_1a58afe6e42b431f4bed175d36720ec025"/><section>
    <title>end()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>end</primary><secondary>ImSpan&lt; T &gt;</secondary></indexterm>
<indexterm><primary>ImSpan&lt; T &gt;</primary><secondary>end</secondary></indexterm>
<computeroutput>template&lt;typename T &gt; </computeroutput><para><computeroutput>T * <link linkend="_struct_im_span">ImSpan</link>&lt; T &gt;::end ( )<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_struct_im_span_1a595471c094072ac34cc318d8ba414f5a"/><section>
    <title>end()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>end</primary><secondary>ImSpan&lt; T &gt;</secondary></indexterm>
<indexterm><primary>ImSpan&lt; T &gt;</primary><secondary>end</secondary></indexterm>
<computeroutput>template&lt;typename T &gt; </computeroutput><para><computeroutput>const T * <link linkend="_struct_im_span">ImSpan</link>&lt; T &gt;::end ( ) const<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_struct_im_span_1a7e80a5146acbfac4bb952f80daf3c305"/><section>
    <title>index_from_ptr()</title>
<indexterm><primary>index_from_ptr</primary><secondary>ImSpan&lt; T &gt;</secondary></indexterm>
<indexterm><primary>ImSpan&lt; T &gt;</primary><secondary>index_from_ptr</secondary></indexterm>
<computeroutput>template&lt;typename T &gt; </computeroutput><para><computeroutput>int <link linkend="_struct_im_span">ImSpan</link>&lt; T &gt;::index_from_ptr (const T * it) const<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_struct_im_span_1a3290bb3b3a0525cd156a68c2b10413c1"/><section>
    <title>operator[]()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>operator[]</primary><secondary>ImSpan&lt; T &gt;</secondary></indexterm>
<indexterm><primary>ImSpan&lt; T &gt;</primary><secondary>operator[]</secondary></indexterm>
<computeroutput>template&lt;typename T &gt; </computeroutput><para><computeroutput>T &amp; <link linkend="_struct_im_span">ImSpan</link>&lt; T &gt;::operator[] (int i)<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_struct_im_span_1aece61505cbe4789a4423eaabdd5689dc"/><section>
    <title>operator[]()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>operator[]</primary><secondary>ImSpan&lt; T &gt;</secondary></indexterm>
<indexterm><primary>ImSpan&lt; T &gt;</primary><secondary>operator[]</secondary></indexterm>
<computeroutput>template&lt;typename T &gt; </computeroutput><para><computeroutput>const T &amp; <link linkend="_struct_im_span">ImSpan</link>&lt; T &gt;::operator[] (int i) const<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_struct_im_span_1a0c07dbc18bebd7d02ca1fb866861506a"/><section>
    <title>set()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>set</primary><secondary>ImSpan&lt; T &gt;</secondary></indexterm>
<indexterm><primary>ImSpan&lt; T &gt;</primary><secondary>set</secondary></indexterm>
<computeroutput>template&lt;typename T &gt; </computeroutput><para><computeroutput><link linkend="_gl__core__4__4_8c_1aba83f95e8ff4889aa9d4905633fca4da">void</link> <link linkend="_struct_im_span">ImSpan</link>&lt; T &gt;::set (T * data, int size)<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_struct_im_span_1aa663983a692baf82e44687cc9a373964"/><section>
    <title>set()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>set</primary><secondary>ImSpan&lt; T &gt;</secondary></indexterm>
<indexterm><primary>ImSpan&lt; T &gt;</primary><secondary>set</secondary></indexterm>
<computeroutput>template&lt;typename T &gt; </computeroutput><para><computeroutput><link linkend="_gl__core__4__4_8c_1aba83f95e8ff4889aa9d4905633fca4da">void</link> <link linkend="_struct_im_span">ImSpan</link>&lt; T &gt;::set (T * data, T * data_end)<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_struct_im_span_1a88270b885861b27640003f6a8a3effa0"/><section>
    <title>size()</title>
<indexterm><primary>size</primary><secondary>ImSpan&lt; T &gt;</secondary></indexterm>
<indexterm><primary>ImSpan&lt; T &gt;</primary><secondary>size</secondary></indexterm>
<computeroutput>template&lt;typename T &gt; </computeroutput><para><computeroutput>int <link linkend="_struct_im_span">ImSpan</link>&lt; T &gt;<link linkend="_imgui__impl__opengl3__loader_8h_1a3d1e3edfcf61ca2d831883e1afbad89e">::size</link> ( ) const<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_struct_im_span_1a23a632e44927fde363df6191531591f2"/><section>
    <title>size_in_bytes()</title>
<indexterm><primary>size_in_bytes</primary><secondary>ImSpan&lt; T &gt;</secondary></indexterm>
<indexterm><primary>ImSpan&lt; T &gt;</primary><secondary>size_in_bytes</secondary></indexterm>
<computeroutput>template&lt;typename T &gt; </computeroutput><para><computeroutput>int <link linkend="_struct_im_span">ImSpan</link>&lt; T &gt;::size_in_bytes ( ) const<computeroutput>[inline]</computeroutput></computeroutput></para></section>
</section>
<section>
<title>Member Data Documentation</title>
<anchor xml:id="_struct_im_span_1a9cb5f8d45dff07a275c97b4d07915878"/><section>
    <title>Data</title>
<indexterm><primary>Data</primary><secondary>ImSpan&lt; T &gt;</secondary></indexterm>
<indexterm><primary>ImSpan&lt; T &gt;</primary><secondary>Data</secondary></indexterm>
<computeroutput>template&lt;typename T &gt; </computeroutput><para><computeroutput>T* <link linkend="_struct_im_span">ImSpan</link>&lt; T &gt;::Data</computeroutput></para></section>
<anchor xml:id="_struct_im_span_1a15a821b2ed71c9e447611cb3fe21d16c"/><section>
    <title>DataEnd</title>
<indexterm><primary>DataEnd</primary><secondary>ImSpan&lt; T &gt;</secondary></indexterm>
<indexterm><primary>ImSpan&lt; T &gt;</primary><secondary>DataEnd</secondary></indexterm>
<computeroutput>template&lt;typename T &gt; </computeroutput><para><computeroutput>T* <link linkend="_struct_im_span">ImSpan</link>&lt; T &gt;::DataEnd</computeroutput></para></section>
<para>
The documentation for this struct was generated from the following file:</para>
<link linkend="_imgui__internal_8h">imgui_internal.h</link></section>
</section>

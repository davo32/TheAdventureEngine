<?xml version='1.0' encoding='UTF-8' standalone='no'?>
<section xmlns="http://docbook.org/ns/docbook" version="5.0" xmlns:xlink="http://www.w3.org/1999/xlink" xml:id="_struct_im_vector" xml:lang="en-US">
<title>ImVector&lt; T &gt; Struct Template Reference</title>
<indexterm><primary>ImVector&lt; T &gt;</primary></indexterm>
<para>
<computeroutput>#include &lt;imgui.h&gt;</computeroutput>
</para>
<simplesect>
    <title>Public Types    </title>
        <itemizedlist>
            <listitem><para>typedef T <link linkend="_struct_im_vector_1a8bd77e4e7581d8e5f9e98d7c2f3c2a80">value_type</link></para>
</listitem>
            <listitem><para>typedef <link linkend="_struct_im_vector_1a8bd77e4e7581d8e5f9e98d7c2f3c2a80">value_type</link> * <link linkend="_struct_im_vector_1a74b5478f1f6fd471cc71219bce483db6">iterator</link></para>
</listitem>
            <listitem><para>typedef const <link linkend="_struct_im_vector_1a8bd77e4e7581d8e5f9e98d7c2f3c2a80">value_type</link> * <link linkend="_struct_im_vector_1aedeac9c5080f9d6ce96ae837768ee4c4">const_iterator</link></para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Public Member Functions    </title>
        <itemizedlist>
            <listitem><para><link linkend="_struct_im_vector_1a547fff373659fd848c3ecc6b25a83f25">ImVector</link> ()</para>
</listitem>
            <listitem><para><link linkend="_struct_im_vector_1a6e2ee59d8b2fa1583617a2110a56aed4">ImVector</link> (const <link linkend="_struct_im_vector">ImVector</link>&lt; T &gt; &amp;src)</para>
</listitem>
            <listitem><para><link linkend="_struct_im_vector">ImVector</link>&lt; T &gt; &amp; <link linkend="_struct_im_vector_1aa616055e1c04b4b1026ecdb67ce839e7">operator=</link> (const <link linkend="_struct_im_vector">ImVector</link>&lt; T &gt; &amp;src)</para>
</listitem>
            <listitem><para><link linkend="_struct_im_vector_1a9b782359ca26eaa1a6a6138fcf341c54">~ImVector</link> ()</para>
</listitem>
            <listitem><para><link linkend="_gl__core__4__4_8c_1aba83f95e8ff4889aa9d4905633fca4da">void</link> <link linkend="_struct_im_vector_1ae2d401b4ec5f1113cdb8edb5a61a38f7">clear</link> ()</para>
</listitem>
            <listitem><para><link linkend="_gl__core__4__4_8c_1aba83f95e8ff4889aa9d4905633fca4da">void</link> <link linkend="_struct_im_vector_1aed9c986ef3cd59fabbd89355d0023122">clear_delete</link> ()</para>
</listitem>
            <listitem><para><link linkend="_gl__core__4__4_8c_1aba83f95e8ff4889aa9d4905633fca4da">void</link> <link linkend="_struct_im_vector_1ac1ed34eac753156e87e8a92f78dbbe3f">clear_destruct</link> ()</para>
</listitem>
            <listitem><para>bool <link linkend="_struct_im_vector_1aa53e48a5272f4bad1099368769514ff1">empty</link> () const</para>
</listitem>
            <listitem><para>int <link linkend="_struct_im_vector_1a8c903ecb1aaee0601b6a8ad835a4a435">size</link> () const</para>
</listitem>
            <listitem><para>int <link linkend="_struct_im_vector_1ade9f2e937e47b0e0f9970dcfba038204">size_in_bytes</link> () const</para>
</listitem>
            <listitem><para>int <link linkend="_struct_im_vector_1a6df36345c5943c83cf11b8e827584bf9">max_size</link> () const</para>
</listitem>
            <listitem><para>int <link linkend="_struct_im_vector_1ac17681baa8b9b5cd97e556da29f9ef73">capacity</link> () const</para>
</listitem>
            <listitem><para>T &amp; <link linkend="_struct_im_vector_1aec87a57a48b7c07e636f338b6113935b">operator[]</link> (int i)</para>
</listitem>
            <listitem><para>const T &amp; <link linkend="_struct_im_vector_1a1aac88ee8dded24c94801a41ed41b793">operator[]</link> (int i) const</para>
</listitem>
            <listitem><para>T * <link linkend="_struct_im_vector_1ab48ae48675fa779e29c9ae5892bb99f4">begin</link> ()</para>
</listitem>
            <listitem><para>const T * <link linkend="_struct_im_vector_1a1e10cf9afeb244d7d42131682531f865">begin</link> () const</para>
</listitem>
            <listitem><para>T * <link linkend="_struct_im_vector_1a278ca772697b2b2139d3b8add336a249">end</link> ()</para>
</listitem>
            <listitem><para>const T * <link linkend="_struct_im_vector_1a457ca3fb7345e1b21c59fc196dd08607">end</link> () const</para>
</listitem>
            <listitem><para>T &amp; <link linkend="_struct_im_vector_1a5a21f508086337de2f6739701d22f721">front</link> ()</para>
</listitem>
            <listitem><para>const T &amp; <link linkend="_struct_im_vector_1a6f55b8b7351295c06eeb4f4f28af14ae">front</link> () const</para>
</listitem>
            <listitem><para>T &amp; <link linkend="_struct_im_vector_1a2d80e87e81b1b01143c8d8be93e6fde1">back</link> ()</para>
</listitem>
            <listitem><para>const T &amp; <link linkend="_struct_im_vector_1ab46e61c71932385c2ee96d1dfc94546a">back</link> () const</para>
</listitem>
            <listitem><para><link linkend="_gl__core__4__4_8c_1aba83f95e8ff4889aa9d4905633fca4da">void</link> <link linkend="_struct_im_vector_1afcec0d2a1e28aebe412b6efd06f0a77a">swap</link> (<link linkend="_struct_im_vector">ImVector</link>&lt; T &gt; &amp;rhs)</para>
</listitem>
            <listitem><para>int <link linkend="_struct_im_vector_1a3a097635d464b1b70dc7d59996a88b28">_grow_capacity</link> (int sz) const</para>
</listitem>
            <listitem><para><link linkend="_gl__core__4__4_8c_1aba83f95e8ff4889aa9d4905633fca4da">void</link> <link linkend="_struct_im_vector_1ac371dd62e56ae486b1a5038cf07eee56">resize</link> (int new_size)</para>
</listitem>
            <listitem><para><link linkend="_gl__core__4__4_8c_1aba83f95e8ff4889aa9d4905633fca4da">void</link> <link linkend="_struct_im_vector_1abe7f21776ecfb7d0214963fd8c0689f0">resize</link> (int new_size, const T &amp;v)</para>
</listitem>
            <listitem><para><link linkend="_gl__core__4__4_8c_1aba83f95e8ff4889aa9d4905633fca4da">void</link> <link linkend="_struct_im_vector_1a8dafcce1e393244890f52ef1aa490876">shrink</link> (int new_size)</para>
</listitem>
            <listitem><para><link linkend="_gl__core__4__4_8c_1aba83f95e8ff4889aa9d4905633fca4da">void</link> <link linkend="_struct_im_vector_1a0f14f5736c3372157856eebb67123b75">reserve</link> (int new_capacity)</para>
</listitem>
            <listitem><para><link linkend="_gl__core__4__4_8c_1aba83f95e8ff4889aa9d4905633fca4da">void</link> <link linkend="_struct_im_vector_1a4120d4da7804ae0a34aa521dbb8e1994">reserve_discard</link> (int new_capacity)</para>
</listitem>
            <listitem><para><link linkend="_gl__core__4__4_8c_1aba83f95e8ff4889aa9d4905633fca4da">void</link> <link linkend="_struct_im_vector_1aab5df48e0711a48bd12f3206e08c4108">push_back</link> (const T &amp;v)</para>
</listitem>
            <listitem><para><link linkend="_gl__core__4__4_8c_1aba83f95e8ff4889aa9d4905633fca4da">void</link> <link linkend="_struct_im_vector_1a3db7ce62d3c429effdb893fbf7148c1c">pop_back</link> ()</para>
</listitem>
            <listitem><para><link linkend="_gl__core__4__4_8c_1aba83f95e8ff4889aa9d4905633fca4da">void</link> <link linkend="_struct_im_vector_1a168658df8e0e1df5698ebe7a69946389">push_front</link> (const T &amp;v)</para>
</listitem>
            <listitem><para>T * <link linkend="_struct_im_vector_1a2f88ac70791f2da6d4168d7b29f38f1e">erase</link> (const T *it)</para>
</listitem>
            <listitem><para>T * <link linkend="_struct_im_vector_1a8feb96da4eb8ef13a48dbd2e18cb641d">erase</link> (const T *it, const T *it_last)</para>
</listitem>
            <listitem><para>T * <link linkend="_struct_im_vector_1a87a4cae517c156b73823c5cd5e86378a">erase_unsorted</link> (const T *it)</para>
</listitem>
            <listitem><para>T * <link linkend="_struct_im_vector_1a541c8cd4b844f5276f10d160cb500533">insert</link> (const T *it, const T &amp;v)</para>
</listitem>
            <listitem><para>bool <link linkend="_struct_im_vector_1a2e7860fbde1c721f168b6262d8f14aec">contains</link> (const T &amp;v) const</para>
</listitem>
            <listitem><para>T * <link linkend="_struct_im_vector_1a406417c3efef769d4bee47df2188831a">find</link> (const T &amp;v)</para>
</listitem>
            <listitem><para>const T * <link linkend="_struct_im_vector_1a1fb6def3d26d7efeae0881e8dffb3f79">find</link> (const T &amp;v) const</para>
</listitem>
            <listitem><para>int <link linkend="_struct_im_vector_1a374b32265297839b0cd8e2b4c827112a">find_index</link> (const T &amp;v) const</para>
</listitem>
            <listitem><para>bool <link linkend="_struct_im_vector_1a4e9214ecaa413240f76223500dbed912">find_erase</link> (const T &amp;v)</para>
</listitem>
            <listitem><para>bool <link linkend="_struct_im_vector_1a07f501e40783436616156682ec668327">find_erase_unsorted</link> (const T &amp;v)</para>
</listitem>
            <listitem><para>int <link linkend="_struct_im_vector_1a3fd48379f807eeb01fb9da39afa30dc7">index_from_ptr</link> (const T *it) const</para>
</listitem>
        </itemizedlist>
</simplesect>
<simplesect>
    <title>Public Attributes    </title>
        <itemizedlist>
            <listitem><para>int <link linkend="_struct_im_vector_1abbfd157947f66280d27b21d70a16df8d">Size</link></para>
</listitem>
            <listitem><para>int <link linkend="_struct_im_vector_1abd24482b4d30d22e37582e521e5bfb33">Capacity</link></para>
</listitem>
            <listitem><para>T * <link linkend="_struct_im_vector_1ac0e46e8b30cb079d93c8f0aad7d7cbd0">Data</link></para>
</listitem>
        </itemizedlist>
</simplesect>
<section>
<title>Member Typedef Documentation</title>
<anchor xml:id="_struct_im_vector_1aedeac9c5080f9d6ce96ae837768ee4c4"/><section>
    <title>const_iterator</title>
<indexterm><primary>const_iterator</primary><secondary>ImVector&lt; T &gt;</secondary></indexterm>
<indexterm><primary>ImVector&lt; T &gt;</primary><secondary>const_iterator</secondary></indexterm>
<computeroutput>template&lt;typename T &gt; </computeroutput><para><computeroutput>typedef const <link linkend="_struct_im_vector_1a8bd77e4e7581d8e5f9e98d7c2f3c2a80">value_type</link>* <link linkend="_struct_im_vector">ImVector</link>&lt; T &gt;::const_iterator</computeroutput></para></section>
<anchor xml:id="_struct_im_vector_1a74b5478f1f6fd471cc71219bce483db6"/><section>
    <title>iterator</title>
<indexterm><primary>iterator</primary><secondary>ImVector&lt; T &gt;</secondary></indexterm>
<indexterm><primary>ImVector&lt; T &gt;</primary><secondary>iterator</secondary></indexterm>
<computeroutput>template&lt;typename T &gt; </computeroutput><para><computeroutput>typedef <link linkend="_struct_im_vector_1a8bd77e4e7581d8e5f9e98d7c2f3c2a80">value_type</link>* <link linkend="_struct_im_vector">ImVector</link>&lt; T &gt;::iterator</computeroutput></para></section>
<anchor xml:id="_struct_im_vector_1a8bd77e4e7581d8e5f9e98d7c2f3c2a80"/><section>
    <title>value_type</title>
<indexterm><primary>value_type</primary><secondary>ImVector&lt; T &gt;</secondary></indexterm>
<indexterm><primary>ImVector&lt; T &gt;</primary><secondary>value_type</secondary></indexterm>
<computeroutput>template&lt;typename T &gt; </computeroutput><para><computeroutput>typedef T <link linkend="_struct_im_vector">ImVector</link>&lt; T &gt;::value_type</computeroutput></para></section>
</section>
<section>
<title>Constructor &amp; Destructor Documentation</title>
<anchor xml:id="_struct_im_vector_1a547fff373659fd848c3ecc6b25a83f25"/><section>
    <title>ImVector()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>ImVector</primary><secondary>ImVector&lt; T &gt;</secondary></indexterm>
<indexterm><primary>ImVector&lt; T &gt;</primary><secondary>ImVector</secondary></indexterm>
<computeroutput>template&lt;typename T &gt; </computeroutput><para><computeroutput><link linkend="_struct_im_vector">ImVector</link>&lt; T &gt;<link linkend="_struct_im_vector">::ImVector</link> ( )<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_struct_im_vector_1a6e2ee59d8b2fa1583617a2110a56aed4"/><section>
    <title>ImVector()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>ImVector</primary><secondary>ImVector&lt; T &gt;</secondary></indexterm>
<indexterm><primary>ImVector&lt; T &gt;</primary><secondary>ImVector</secondary></indexterm>
<computeroutput>template&lt;typename T &gt; </computeroutput><para><computeroutput><link linkend="_struct_im_vector">ImVector</link>&lt; T &gt;<link linkend="_struct_im_vector">::ImVector</link> (const <link linkend="_struct_im_vector">ImVector</link>&lt; T &gt; &amp; src)<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_struct_im_vector_1a9b782359ca26eaa1a6a6138fcf341c54"/><section>
    <title>~ImVector()</title>
<indexterm><primary>~ImVector</primary><secondary>ImVector&lt; T &gt;</secondary></indexterm>
<indexterm><primary>ImVector&lt; T &gt;</primary><secondary>~ImVector</secondary></indexterm>
<computeroutput>template&lt;typename T &gt; </computeroutput><para><computeroutput><link linkend="_struct_im_vector">ImVector</link>&lt; T &gt;::~<link linkend="_struct_im_vector">ImVector</link> ( )<computeroutput>[inline]</computeroutput></computeroutput></para></section>
</section>
<section>
<title>Member Function Documentation</title>
<anchor xml:id="_struct_im_vector_1a3a097635d464b1b70dc7d59996a88b28"/><section>
    <title>_grow_capacity()</title>
<indexterm><primary>_grow_capacity</primary><secondary>ImVector&lt; T &gt;</secondary></indexterm>
<indexterm><primary>ImVector&lt; T &gt;</primary><secondary>_grow_capacity</secondary></indexterm>
<computeroutput>template&lt;typename T &gt; </computeroutput><para><computeroutput>int <link linkend="_struct_im_vector">ImVector</link>&lt; T &gt;::_grow_capacity (int sz) const<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_struct_im_vector_1a2d80e87e81b1b01143c8d8be93e6fde1"/><section>
    <title>back()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>back</primary><secondary>ImVector&lt; T &gt;</secondary></indexterm>
<indexterm><primary>ImVector&lt; T &gt;</primary><secondary>back</secondary></indexterm>
<computeroutput>template&lt;typename T &gt; </computeroutput><para><computeroutput>T &amp; <link linkend="_struct_im_vector">ImVector</link>&lt; T &gt;::back ( )<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_struct_im_vector_1ab46e61c71932385c2ee96d1dfc94546a"/><section>
    <title>back()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>back</primary><secondary>ImVector&lt; T &gt;</secondary></indexterm>
<indexterm><primary>ImVector&lt; T &gt;</primary><secondary>back</secondary></indexterm>
<computeroutput>template&lt;typename T &gt; </computeroutput><para><computeroutput>const T &amp; <link linkend="_struct_im_vector">ImVector</link>&lt; T &gt;::back ( ) const<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_struct_im_vector_1ab48ae48675fa779e29c9ae5892bb99f4"/><section>
    <title>begin()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>begin</primary><secondary>ImVector&lt; T &gt;</secondary></indexterm>
<indexterm><primary>ImVector&lt; T &gt;</primary><secondary>begin</secondary></indexterm>
<computeroutput>template&lt;typename T &gt; </computeroutput><para><computeroutput>T * <link linkend="_struct_im_vector">ImVector</link>&lt; T &gt;::begin ( )<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_struct_im_vector_1a1e10cf9afeb244d7d42131682531f865"/><section>
    <title>begin()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>begin</primary><secondary>ImVector&lt; T &gt;</secondary></indexterm>
<indexterm><primary>ImVector&lt; T &gt;</primary><secondary>begin</secondary></indexterm>
<computeroutput>template&lt;typename T &gt; </computeroutput><para><computeroutput>const T * <link linkend="_struct_im_vector">ImVector</link>&lt; T &gt;::begin ( ) const<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_struct_im_vector_1ac17681baa8b9b5cd97e556da29f9ef73"/><section>
    <title>capacity()</title>
<indexterm><primary>capacity</primary><secondary>ImVector&lt; T &gt;</secondary></indexterm>
<indexterm><primary>ImVector&lt; T &gt;</primary><secondary>capacity</secondary></indexterm>
<computeroutput>template&lt;typename T &gt; </computeroutput><para><computeroutput>int <link linkend="_struct_im_vector">ImVector</link>&lt; T &gt;::capacity ( ) const<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_struct_im_vector_1ae2d401b4ec5f1113cdb8edb5a61a38f7"/><section>
    <title>clear()</title>
<indexterm><primary>clear</primary><secondary>ImVector&lt; T &gt;</secondary></indexterm>
<indexterm><primary>ImVector&lt; T &gt;</primary><secondary>clear</secondary></indexterm>
<computeroutput>template&lt;typename T &gt; </computeroutput><para><computeroutput><link linkend="_gl__core__4__4_8c_1aba83f95e8ff4889aa9d4905633fca4da">void</link> <link linkend="_struct_im_vector">ImVector</link>&lt; T &gt;::clear ( )<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_struct_im_vector_1aed9c986ef3cd59fabbd89355d0023122"/><section>
    <title>clear_delete()</title>
<indexterm><primary>clear_delete</primary><secondary>ImVector&lt; T &gt;</secondary></indexterm>
<indexterm><primary>ImVector&lt; T &gt;</primary><secondary>clear_delete</secondary></indexterm>
<computeroutput>template&lt;typename T &gt; </computeroutput><para><computeroutput><link linkend="_gl__core__4__4_8c_1aba83f95e8ff4889aa9d4905633fca4da">void</link> <link linkend="_struct_im_vector">ImVector</link>&lt; T &gt;::clear_delete ( )<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_struct_im_vector_1ac1ed34eac753156e87e8a92f78dbbe3f"/><section>
    <title>clear_destruct()</title>
<indexterm><primary>clear_destruct</primary><secondary>ImVector&lt; T &gt;</secondary></indexterm>
<indexterm><primary>ImVector&lt; T &gt;</primary><secondary>clear_destruct</secondary></indexterm>
<computeroutput>template&lt;typename T &gt; </computeroutput><para><computeroutput><link linkend="_gl__core__4__4_8c_1aba83f95e8ff4889aa9d4905633fca4da">void</link> <link linkend="_struct_im_vector">ImVector</link>&lt; T &gt;::clear_destruct ( )<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_struct_im_vector_1a2e7860fbde1c721f168b6262d8f14aec"/><section>
    <title>contains()</title>
<indexterm><primary>contains</primary><secondary>ImVector&lt; T &gt;</secondary></indexterm>
<indexterm><primary>ImVector&lt; T &gt;</primary><secondary>contains</secondary></indexterm>
<computeroutput>template&lt;typename T &gt; </computeroutput><para><computeroutput>bool <link linkend="_struct_im_vector">ImVector</link>&lt; T &gt;::contains (const T &amp; v) const<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_struct_im_vector_1aa53e48a5272f4bad1099368769514ff1"/><section>
    <title>empty()</title>
<indexterm><primary>empty</primary><secondary>ImVector&lt; T &gt;</secondary></indexterm>
<indexterm><primary>ImVector&lt; T &gt;</primary><secondary>empty</secondary></indexterm>
<computeroutput>template&lt;typename T &gt; </computeroutput><para><computeroutput>bool <link linkend="_struct_im_vector">ImVector</link>&lt; T &gt;::empty ( ) const<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_struct_im_vector_1a278ca772697b2b2139d3b8add336a249"/><section>
    <title>end()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>end</primary><secondary>ImVector&lt; T &gt;</secondary></indexterm>
<indexterm><primary>ImVector&lt; T &gt;</primary><secondary>end</secondary></indexterm>
<computeroutput>template&lt;typename T &gt; </computeroutput><para><computeroutput>T * <link linkend="_struct_im_vector">ImVector</link>&lt; T &gt;::end ( )<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_struct_im_vector_1a457ca3fb7345e1b21c59fc196dd08607"/><section>
    <title>end()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>end</primary><secondary>ImVector&lt; T &gt;</secondary></indexterm>
<indexterm><primary>ImVector&lt; T &gt;</primary><secondary>end</secondary></indexterm>
<computeroutput>template&lt;typename T &gt; </computeroutput><para><computeroutput>const T * <link linkend="_struct_im_vector">ImVector</link>&lt; T &gt;::end ( ) const<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_struct_im_vector_1a2f88ac70791f2da6d4168d7b29f38f1e"/><section>
    <title>erase()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>erase</primary><secondary>ImVector&lt; T &gt;</secondary></indexterm>
<indexterm><primary>ImVector&lt; T &gt;</primary><secondary>erase</secondary></indexterm>
<computeroutput>template&lt;typename T &gt; </computeroutput><para><computeroutput>T * <link linkend="_struct_im_vector">ImVector</link>&lt; T &gt;::erase (const T * it)<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_struct_im_vector_1a8feb96da4eb8ef13a48dbd2e18cb641d"/><section>
    <title>erase()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>erase</primary><secondary>ImVector&lt; T &gt;</secondary></indexterm>
<indexterm><primary>ImVector&lt; T &gt;</primary><secondary>erase</secondary></indexterm>
<computeroutput>template&lt;typename T &gt; </computeroutput><para><computeroutput>T * <link linkend="_struct_im_vector">ImVector</link>&lt; T &gt;::erase (const T * it, const T * it_last)<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_struct_im_vector_1a87a4cae517c156b73823c5cd5e86378a"/><section>
    <title>erase_unsorted()</title>
<indexterm><primary>erase_unsorted</primary><secondary>ImVector&lt; T &gt;</secondary></indexterm>
<indexterm><primary>ImVector&lt; T &gt;</primary><secondary>erase_unsorted</secondary></indexterm>
<computeroutput>template&lt;typename T &gt; </computeroutput><para><computeroutput>T * <link linkend="_struct_im_vector">ImVector</link>&lt; T &gt;::erase_unsorted (const T * it)<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_struct_im_vector_1a406417c3efef769d4bee47df2188831a"/><section>
    <title>find()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>find</primary><secondary>ImVector&lt; T &gt;</secondary></indexterm>
<indexterm><primary>ImVector&lt; T &gt;</primary><secondary>find</secondary></indexterm>
<computeroutput>template&lt;typename T &gt; </computeroutput><para><computeroutput>T * <link linkend="_struct_im_vector">ImVector</link>&lt; T &gt;::find (const T &amp; v)<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_struct_im_vector_1a1fb6def3d26d7efeae0881e8dffb3f79"/><section>
    <title>find()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>find</primary><secondary>ImVector&lt; T &gt;</secondary></indexterm>
<indexterm><primary>ImVector&lt; T &gt;</primary><secondary>find</secondary></indexterm>
<computeroutput>template&lt;typename T &gt; </computeroutput><para><computeroutput>const T * <link linkend="_struct_im_vector">ImVector</link>&lt; T &gt;::find (const T &amp; v) const<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_struct_im_vector_1a4e9214ecaa413240f76223500dbed912"/><section>
    <title>find_erase()</title>
<indexterm><primary>find_erase</primary><secondary>ImVector&lt; T &gt;</secondary></indexterm>
<indexterm><primary>ImVector&lt; T &gt;</primary><secondary>find_erase</secondary></indexterm>
<computeroutput>template&lt;typename T &gt; </computeroutput><para><computeroutput>bool <link linkend="_struct_im_vector">ImVector</link>&lt; T &gt;::find_erase (const T &amp; v)<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_struct_im_vector_1a07f501e40783436616156682ec668327"/><section>
    <title>find_erase_unsorted()</title>
<indexterm><primary>find_erase_unsorted</primary><secondary>ImVector&lt; T &gt;</secondary></indexterm>
<indexterm><primary>ImVector&lt; T &gt;</primary><secondary>find_erase_unsorted</secondary></indexterm>
<computeroutput>template&lt;typename T &gt; </computeroutput><para><computeroutput>bool <link linkend="_struct_im_vector">ImVector</link>&lt; T &gt;::find_erase_unsorted (const T &amp; v)<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_struct_im_vector_1a374b32265297839b0cd8e2b4c827112a"/><section>
    <title>find_index()</title>
<indexterm><primary>find_index</primary><secondary>ImVector&lt; T &gt;</secondary></indexterm>
<indexterm><primary>ImVector&lt; T &gt;</primary><secondary>find_index</secondary></indexterm>
<computeroutput>template&lt;typename T &gt; </computeroutput><para><computeroutput>int <link linkend="_struct_im_vector">ImVector</link>&lt; T &gt;::find_index (const T &amp; v) const<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_struct_im_vector_1a5a21f508086337de2f6739701d22f721"/><section>
    <title>front()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>front</primary><secondary>ImVector&lt; T &gt;</secondary></indexterm>
<indexterm><primary>ImVector&lt; T &gt;</primary><secondary>front</secondary></indexterm>
<computeroutput>template&lt;typename T &gt; </computeroutput><para><computeroutput>T &amp; <link linkend="_struct_im_vector">ImVector</link>&lt; T &gt;::front ( )<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_struct_im_vector_1a6f55b8b7351295c06eeb4f4f28af14ae"/><section>
    <title>front()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>front</primary><secondary>ImVector&lt; T &gt;</secondary></indexterm>
<indexterm><primary>ImVector&lt; T &gt;</primary><secondary>front</secondary></indexterm>
<computeroutput>template&lt;typename T &gt; </computeroutput><para><computeroutput>const T &amp; <link linkend="_struct_im_vector">ImVector</link>&lt; T &gt;::front ( ) const<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_struct_im_vector_1a3fd48379f807eeb01fb9da39afa30dc7"/><section>
    <title>index_from_ptr()</title>
<indexterm><primary>index_from_ptr</primary><secondary>ImVector&lt; T &gt;</secondary></indexterm>
<indexterm><primary>ImVector&lt; T &gt;</primary><secondary>index_from_ptr</secondary></indexterm>
<computeroutput>template&lt;typename T &gt; </computeroutput><para><computeroutput>int <link linkend="_struct_im_vector">ImVector</link>&lt; T &gt;::index_from_ptr (const T * it) const<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_struct_im_vector_1a541c8cd4b844f5276f10d160cb500533"/><section>
    <title>insert()</title>
<indexterm><primary>insert</primary><secondary>ImVector&lt; T &gt;</secondary></indexterm>
<indexterm><primary>ImVector&lt; T &gt;</primary><secondary>insert</secondary></indexterm>
<computeroutput>template&lt;typename T &gt; </computeroutput><para><computeroutput>T * <link linkend="_struct_im_vector">ImVector</link>&lt; T &gt;::insert (const T * it, const T &amp; v)<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_struct_im_vector_1a6df36345c5943c83cf11b8e827584bf9"/><section>
    <title>max_size()</title>
<indexterm><primary>max_size</primary><secondary>ImVector&lt; T &gt;</secondary></indexterm>
<indexterm><primary>ImVector&lt; T &gt;</primary><secondary>max_size</secondary></indexterm>
<computeroutput>template&lt;typename T &gt; </computeroutput><para><computeroutput>int <link linkend="_struct_im_vector">ImVector</link>&lt; T &gt;::max_size ( ) const<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_struct_im_vector_1aa616055e1c04b4b1026ecdb67ce839e7"/><section>
    <title>operator=()</title>
<indexterm><primary>operator=</primary><secondary>ImVector&lt; T &gt;</secondary></indexterm>
<indexterm><primary>ImVector&lt; T &gt;</primary><secondary>operator=</secondary></indexterm>
<computeroutput>template&lt;typename T &gt; </computeroutput><para><computeroutput><link linkend="_struct_im_vector">ImVector</link>&lt; T &gt; &amp; <link linkend="_struct_im_vector">ImVector</link>&lt; T &gt;::operator= (const <link linkend="_struct_im_vector">ImVector</link>&lt; T &gt; &amp; src)<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_struct_im_vector_1aec87a57a48b7c07e636f338b6113935b"/><section>
    <title>operator[]()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>operator[]</primary><secondary>ImVector&lt; T &gt;</secondary></indexterm>
<indexterm><primary>ImVector&lt; T &gt;</primary><secondary>operator[]</secondary></indexterm>
<computeroutput>template&lt;typename T &gt; </computeroutput><para><computeroutput>T &amp; <link linkend="_struct_im_vector">ImVector</link>&lt; T &gt;::operator[] (int i)<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_struct_im_vector_1a1aac88ee8dded24c94801a41ed41b793"/><section>
    <title>operator[]()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>operator[]</primary><secondary>ImVector&lt; T &gt;</secondary></indexterm>
<indexterm><primary>ImVector&lt; T &gt;</primary><secondary>operator[]</secondary></indexterm>
<computeroutput>template&lt;typename T &gt; </computeroutput><para><computeroutput>const T &amp; <link linkend="_struct_im_vector">ImVector</link>&lt; T &gt;::operator[] (int i) const<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_struct_im_vector_1a3db7ce62d3c429effdb893fbf7148c1c"/><section>
    <title>pop_back()</title>
<indexterm><primary>pop_back</primary><secondary>ImVector&lt; T &gt;</secondary></indexterm>
<indexterm><primary>ImVector&lt; T &gt;</primary><secondary>pop_back</secondary></indexterm>
<computeroutput>template&lt;typename T &gt; </computeroutput><para><computeroutput><link linkend="_gl__core__4__4_8c_1aba83f95e8ff4889aa9d4905633fca4da">void</link> <link linkend="_struct_im_vector">ImVector</link>&lt; T &gt;::pop_back ( )<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_struct_im_vector_1aab5df48e0711a48bd12f3206e08c4108"/><section>
    <title>push_back()</title>
<indexterm><primary>push_back</primary><secondary>ImVector&lt; T &gt;</secondary></indexterm>
<indexterm><primary>ImVector&lt; T &gt;</primary><secondary>push_back</secondary></indexterm>
<computeroutput>template&lt;typename T &gt; </computeroutput><para><computeroutput><link linkend="_gl__core__4__4_8c_1aba83f95e8ff4889aa9d4905633fca4da">void</link> <link linkend="_struct_im_vector">ImVector</link>&lt; T &gt;::push_back (const T &amp; v)<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_struct_im_vector_1a168658df8e0e1df5698ebe7a69946389"/><section>
    <title>push_front()</title>
<indexterm><primary>push_front</primary><secondary>ImVector&lt; T &gt;</secondary></indexterm>
<indexterm><primary>ImVector&lt; T &gt;</primary><secondary>push_front</secondary></indexterm>
<computeroutput>template&lt;typename T &gt; </computeroutput><para><computeroutput><link linkend="_gl__core__4__4_8c_1aba83f95e8ff4889aa9d4905633fca4da">void</link> <link linkend="_struct_im_vector">ImVector</link>&lt; T &gt;::push_front (const T &amp; v)<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_struct_im_vector_1a0f14f5736c3372157856eebb67123b75"/><section>
    <title>reserve()</title>
<indexterm><primary>reserve</primary><secondary>ImVector&lt; T &gt;</secondary></indexterm>
<indexterm><primary>ImVector&lt; T &gt;</primary><secondary>reserve</secondary></indexterm>
<computeroutput>template&lt;typename T &gt; </computeroutput><para><computeroutput><link linkend="_gl__core__4__4_8c_1aba83f95e8ff4889aa9d4905633fca4da">void</link> <link linkend="_struct_im_vector">ImVector</link>&lt; T &gt;::reserve (int new_capacity)<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_struct_im_vector_1a4120d4da7804ae0a34aa521dbb8e1994"/><section>
    <title>reserve_discard()</title>
<indexterm><primary>reserve_discard</primary><secondary>ImVector&lt; T &gt;</secondary></indexterm>
<indexterm><primary>ImVector&lt; T &gt;</primary><secondary>reserve_discard</secondary></indexterm>
<computeroutput>template&lt;typename T &gt; </computeroutput><para><computeroutput><link linkend="_gl__core__4__4_8c_1aba83f95e8ff4889aa9d4905633fca4da">void</link> <link linkend="_struct_im_vector">ImVector</link>&lt; T &gt;::reserve_discard (int new_capacity)<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_struct_im_vector_1ac371dd62e56ae486b1a5038cf07eee56"/><section>
    <title>resize()<computeroutput>[1/2]</computeroutput></title>
<indexterm><primary>resize</primary><secondary>ImVector&lt; T &gt;</secondary></indexterm>
<indexterm><primary>ImVector&lt; T &gt;</primary><secondary>resize</secondary></indexterm>
<computeroutput>template&lt;typename T &gt; </computeroutput><para><computeroutput><link linkend="_gl__core__4__4_8c_1aba83f95e8ff4889aa9d4905633fca4da">void</link> <link linkend="_struct_im_vector">ImVector</link>&lt; T &gt;::resize (int new_size)<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_struct_im_vector_1abe7f21776ecfb7d0214963fd8c0689f0"/><section>
    <title>resize()<computeroutput>[2/2]</computeroutput></title>
<indexterm><primary>resize</primary><secondary>ImVector&lt; T &gt;</secondary></indexterm>
<indexterm><primary>ImVector&lt; T &gt;</primary><secondary>resize</secondary></indexterm>
<computeroutput>template&lt;typename T &gt; </computeroutput><para><computeroutput><link linkend="_gl__core__4__4_8c_1aba83f95e8ff4889aa9d4905633fca4da">void</link> <link linkend="_struct_im_vector">ImVector</link>&lt; T &gt;::resize (int new_size, const T &amp; v)<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_struct_im_vector_1a8dafcce1e393244890f52ef1aa490876"/><section>
    <title>shrink()</title>
<indexterm><primary>shrink</primary><secondary>ImVector&lt; T &gt;</secondary></indexterm>
<indexterm><primary>ImVector&lt; T &gt;</primary><secondary>shrink</secondary></indexterm>
<computeroutput>template&lt;typename T &gt; </computeroutput><para><computeroutput><link linkend="_gl__core__4__4_8c_1aba83f95e8ff4889aa9d4905633fca4da">void</link> <link linkend="_struct_im_vector">ImVector</link>&lt; T &gt;::shrink (int new_size)<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_struct_im_vector_1a8c903ecb1aaee0601b6a8ad835a4a435"/><section>
    <title>size()</title>
<indexterm><primary>size</primary><secondary>ImVector&lt; T &gt;</secondary></indexterm>
<indexterm><primary>ImVector&lt; T &gt;</primary><secondary>size</secondary></indexterm>
<computeroutput>template&lt;typename T &gt; </computeroutput><para><computeroutput>int <link linkend="_struct_im_vector">ImVector</link>&lt; T &gt;<link linkend="_imgui__impl__opengl3__loader_8h_1a3d1e3edfcf61ca2d831883e1afbad89e">::size</link> ( ) const<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_struct_im_vector_1ade9f2e937e47b0e0f9970dcfba038204"/><section>
    <title>size_in_bytes()</title>
<indexterm><primary>size_in_bytes</primary><secondary>ImVector&lt; T &gt;</secondary></indexterm>
<indexterm><primary>ImVector&lt; T &gt;</primary><secondary>size_in_bytes</secondary></indexterm>
<computeroutput>template&lt;typename T &gt; </computeroutput><para><computeroutput>int <link linkend="_struct_im_vector">ImVector</link>&lt; T &gt;::size_in_bytes ( ) const<computeroutput>[inline]</computeroutput></computeroutput></para></section>
<anchor xml:id="_struct_im_vector_1afcec0d2a1e28aebe412b6efd06f0a77a"/><section>
    <title>swap()</title>
<indexterm><primary>swap</primary><secondary>ImVector&lt; T &gt;</secondary></indexterm>
<indexterm><primary>ImVector&lt; T &gt;</primary><secondary>swap</secondary></indexterm>
<computeroutput>template&lt;typename T &gt; </computeroutput><para><computeroutput><link linkend="_gl__core__4__4_8c_1aba83f95e8ff4889aa9d4905633fca4da">void</link> <link linkend="_struct_im_vector">ImVector</link>&lt; T &gt;::swap (<link linkend="_struct_im_vector">ImVector</link>&lt; T &gt; &amp; rhs)<computeroutput>[inline]</computeroutput></computeroutput></para></section>
</section>
<section>
<title>Member Data Documentation</title>
<anchor xml:id="_struct_im_vector_1abd24482b4d30d22e37582e521e5bfb33"/><section>
    <title>Capacity</title>
<indexterm><primary>Capacity</primary><secondary>ImVector&lt; T &gt;</secondary></indexterm>
<indexterm><primary>ImVector&lt; T &gt;</primary><secondary>Capacity</secondary></indexterm>
<computeroutput>template&lt;typename T &gt; </computeroutput><para><computeroutput>int <link linkend="_struct_im_vector">ImVector</link>&lt; T &gt;::Capacity</computeroutput></para></section>
<anchor xml:id="_struct_im_vector_1ac0e46e8b30cb079d93c8f0aad7d7cbd0"/><section>
    <title>Data</title>
<indexterm><primary>Data</primary><secondary>ImVector&lt; T &gt;</secondary></indexterm>
<indexterm><primary>ImVector&lt; T &gt;</primary><secondary>Data</secondary></indexterm>
<computeroutput>template&lt;typename T &gt; </computeroutput><para><computeroutput>T* <link linkend="_struct_im_vector">ImVector</link>&lt; T &gt;::Data</computeroutput></para></section>
<anchor xml:id="_struct_im_vector_1abbfd157947f66280d27b21d70a16df8d"/><section>
    <title>Size</title>
<indexterm><primary>Size</primary><secondary>ImVector&lt; T &gt;</secondary></indexterm>
<indexterm><primary>ImVector&lt; T &gt;</primary><secondary>Size</secondary></indexterm>
<computeroutput>template&lt;typename T &gt; </computeroutput><para><computeroutput>int <link linkend="_struct_im_vector">ImVector</link>&lt; T &gt;::Size</computeroutput></para></section>
<para>
The documentation for this struct was generated from the following file:</para>
<link linkend="_imgui_8h">imgui.h</link></section>
</section>
